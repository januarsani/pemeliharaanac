import React,{useEffect,useState} from 'react';import { fetchMonthlyReport, supabase } from './api';import { Chart, registerables } from 'chart.js';import jsPDF from 'jspdf';import 'jspdf-autotable';Chart.register(...registerables);export default function Dashboard(){const [year,setYear]=useState(new Date().getFullYear());const [month,setMonth]=useState(new Date().getMonth()+1);const [report,setReport]=useState({items:[]});const chartRef=React.useRef(null);useEffect(()=>{load();},[year,month]);async function load(){try{const r=await fetchMonthlyReport(year,month);setReport(r);if(chartRef.current)chartRef.current.destroy?.();const ctx=document.getElementById('chart').getContext('2d');chartRef.current=new Chart(ctx,{type:'bar',data:{labels:r.items.map(i=>i.ac_id),datasets:[{label:'Total biaya (Rp)',data:r.items.map(i=>i.total_cost)}]},options:{responsive:true,maintainAspectRatio:false}});}catch(err){console.error(err);} }async function downloadPDF(){const start=`${year}-${String(month).padStart(2,'0')}-01`;const endDate=new Date(year,month,0).getDate();const end=`${year}-${String(month).padStart(2,'0')}-${String(endDate).padStart(2,'0')}`;const { data, error } = await supabase.from('records').select('ac_id, date, description, cost').gte('date', start).lte('date', end).order('date',{ascending:true});if(error){console.error(error);return;}const doc=new jsPDF();const title=`Laporan Pemeliharaan AC - ${year}-${String(month).padStart(2,'0')}`;doc.setFontSize(14);doc.text(title,14,20);const tableColumn=['AC ID','Tanggal','Uraian','Biaya (Rp)'];const tableRows=data.map(r=>[r.ac_id,r.date,r.description||'-',Number(r.cost||0).toLocaleString()]);doc.autoTable({startY:28,head:[tableColumn],body:tableRows,styles:{fontSize:10}});const total=tableRows.reduce((s,row)=>s + Number(row[3].toString().replace(/,/g,'' )||0),0);doc.text(`Total Biaya: Rp ${total.toLocaleString()}`,14,doc.lastAutoTable.finalY + 10);doc.save(`laporan-ac-${year}-${String(month).padStart(2,'0')}.pdf`);}const totalAll=report.items.reduce((s,i)=>s + Number(i.total_cost||0),0);const totalTimes=report.items.reduce((s,i)=>s + Number(i.times||0),0);return (<div className='page'><div className='header-row'><div><h3>Ringkasan Bulanan</h3><div className='muted'>Laporan untuk presentasi ke atasan</div></div><div className='filters'><label>Tahun <input type='number' value={year} onChange={e=>setYear(Number(e.target.value))}/></label><label style={{marginLeft:8}}>Bulan <input type='number' value={month} onChange={e=>setMonth(Number(e.target.value))} min={1} max={12}/></label><button className='btn primary' style={{marginLeft:10}} onClick={downloadPDF}>Download PDF</button></div></div><div className='cards'><div className='stat-card'><div className='stat-title'>Total Biaya</div><div className='stat-value'>Rp {totalAll.toLocaleString()}</div></div><div className='stat-card'><div className='stat-title'>Total Pekerjaan</div><div className='stat-value'>{totalTimes}</div></div></div><div className='chart-wrap'><canvas id='chart'></canvas></div><h4 style={{marginTop:18}}>Rincian Per AC</h4><table className='table'><thead><tr><th>AC ID</th><th>Jumlah</th><th>Total Biaya</th></tr></thead><tbody>{report.items.map(it=>(<tr key={it.ac_id}><td>{it.ac_id}</td><td>{it.times}</td><td>Rp {Number(it.total_cost).toLocaleString()}</td></tr>))}</tbody></table></div>);}